void main() {
  Idol blackPink =  Idol('블랙핑크', ['지수', '제니', '리사']);

  Idol bts = Idol('bts', ['정훈', '정훈', '임정훈']);
  
  print(blackPink.firstMember);
  blackPink.firstMember = '정훈정훈';
  print(blackPink.firstMember);
}

//idol class
// name (이름)
// members (멤버들)
// sayHello (인사)
// introduce (멤버소개)

// constructor (생성자)
// immutable 프로그래밍 - 클래스의 변수들은 되도록 final키워드를 사용한다
// const 로 선언하면 내용이 같을 시 같은 인스턴스로 생각한다

// getter/setter
// 데이터를 가져올때 / 데이터를 설정할 때
// private를 해주고 싶을 때 dart에서는 클래스명,변수,함수 등 앞에 _ 를 붙여준다
class Idol {
  String name;
  List<String> members;

  /*Idol(String name, List<String> members)
      : this.name = name,
        this.members = members;*/ //아래줄과 결국 같다

  Idol(this.name, this.members);

  Idol.fromList(List values)
      : this.members = values[0],
        this.name = values[0];

  void sayHello() {
    print('안녕~ ${this.name}이야');
  }

  void introdue() {
    print('노래부르는 그룹이야~');
  }
  
  // getter
  String get firstMember{
    return this.members[0];
  }
  // setter
  set firstMember(String name){ //setter는 무조건 1개의 파라미터만 받는다
    this.members[0] = name;
  }
}

void main() {
  print('-----------------Idol---------------');
  Idol apink = new Idol(name: '에이핑크', membersCount: 4);

  apink.sayName();
  apink.sayMembersCount();
  BoyGroup boys = new BoyGroup('bts', 7);
  boys.sayMembersCount();
  boys.sayMale();
  
  GirlGroup girls = new GirlGroup('apink', 2);
  girls.sayFemale();
  
  print('-----------Type Comparison---------');
  
  print(apink is Idol);
  print(apink is BoyGroup);
  print(apink is GirlGroup);
  
  print('-----------Type Comparison---------');
  
  print(boys is Idol);
  print(boys is BoyGroup);
  print(boys is GirlGroup);
  
  
}

// 상속 - inheritance
// 상속을 받으면 부모클래스의 모든 속성을 자식 클래스가 부여받는다.
// 부모클래스에서 자식클래스에서 속성을 넘겨주지만 자식클래스에서 부모클래스로 속성을 절대 넘겨주지 않는다.

class Idol {
  // 이름
  String name;

  // 멤버 수
  int membersCount;

  Idol({required this.name, required this.membersCount});

  void sayName() {
    print('저는 ${this.name}입니다');
  }

  void sayMembersCount() {
    print('${this.name}은 ${this.membersCount}명의 멤버가 있습니다');
  }
}

class BoyGroup extends Idol {
  BoyGroup(String name, int membersCount) : super(name : name, membersCount: membersCount);
  
  void sayMale(){
    print('난 남자');
  }
}

class GirlGroup extends Idol {
  GirlGroup(String name, int membersCount) : super(name : name, membersCount: membersCount);
  
  void sayFemale(){
    print('난 여자');
  }
  
}

void main() {
  TimesTwo tt = new TimesTwo(2);
  TimesFour tf = new TimesFour(2);
  print(tt.calculate());
  print(tf.calculate());
  
}

// method - function (class 내부에 있는 함수)
// override - 덮어쓰다 (우선시하다)

class TimesTwo {
  final int number;
  TimesTwo(this.number);

  int calculate() {
    return this.number * 2;
  }
}

class TimesFour extends TimesTwo{
  TimesFour(int number) : super(number);
  
  @override
  int calculate(){
    return super.calculate() * 2;
  }
}

void main() {

  Employee jung = Employee('정훈');
  Employee lim = Employee('임정훈');
  
  jung.name = '하하';
  jung.printNameBuilding();
  lim.printNameBuilding();
  
  Employee.building = '오투타워';
  
  jung.printNameBuilding();
  lim.printNameBuilding();
  Employee.printBuilding();
}

class Employee {
  //static은 인스턴스에 귀속되는 게 아니라 class에 귀속된다.
  static String? building;
  String name;
  
  Employee(this.name);
  
  void printNameBuilding(){
    print('제 이름은 $name입니다. $building 건물에서 근무하고 있습니다.');
    
  }
  static void printBuilding(){
    print('저는 $building 건물에서 근무중입니다');
  }
}

void main() {
  BoyGroup bts = BoyGroup('bts');
  GirlGroup apink = GirlGroup('apink');
  
}

//interface 
abstract class IdolInterface{ //inteerface를 인스턴스화하지 못하게 하기 위해 abstract
  String name;
  
  IdolInterface(this.name);
  
  void sayName(); // abstract를 사용하면 바디 ( {} ) 를 지워도 된다.
}

class BoyGroup implements IdolInterface{
  String name;
  
  BoyGroup(this.name);
  
  void sayName(){
    print('제 이름은 $name입니다');
  }
}


class GirlGroup implements IdolInterface{
  String name;
  
  GirlGroup(this.name);
  
  void sayName(){
    print('제 이름은 $name입니다');
  }
}

