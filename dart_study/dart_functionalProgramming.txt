//--------------------Mapping-------------------
void main(){//List의 mapping
  List<String> bPink = ['로제', '리사','제니'];
  
  final newBPink = bPink.map((x){ // 리스트의 형태를 바꿔줄 떄 많이 사용한다 .map() - 각각의 요소를 한번씩 받게 된다
    return '블랙핑크 $x';
  });
  final newBPink2 = bPink.map((x) => '블랙핑크 $x');//바로 위와 같다
  print(newBPink.toList()); //toList()를 사용하지 않으면 iterable 즉 ()형태로 나오기 때문에 리스트형으로 변환
  print(newBPink2.toList());
  
  print(bPink == bPink);
  print(bPink == newBPink);
  print(newBPink == newBPink2);// .map() 항상 새로운 리스트를 만든다 요소가 같은데도
  
  String number = '13579';//를 [1.jpg, 3.jpg ... 로 바꿔보자];
  final parsed = number.split('').map((x) => '$x.jpg').toList(); // split('')은 문자를 각각 분리해 List형으로 변환해준다
  print(parsed);
}

void main() {//Map의 mapping
  Map<String, String> harry = {
    'Harry Potter': '해리 포터',
    'Ron Weasely': '론 위즐리',
    'Herminone Granger': '헤르미온느 그레인저'
  };
  final newHarry = harry.map(//Map을 mapping 하면 key와 value를 같이 받는다
      (key, value) =>
          MapEntry('Harry Potter Character $key', '해리포터 캐릭터 $value'));
  print(newHarry);//mapping 해도 Map형태로~
  final keys = harry.keys.map((x)=> 'Harry Potter Character $x').toList;//위 형태보다는 key와 value를 나눈 이 형태를 많이 사용한다.
  
  print(keys);
}

void main() {//where
  List<Map<String, String>> people = [
    {
      'name':'로제',
      'group': '블랙핑크'
    },
    {
      'name': '지수',
      'group': '블랙핑크'
    },
    {
      'name': 'RM',
      'group': 'BTS'
    },
    {
      'name': '진',
      'group': 'BTS'
    }
  ];
  print(people);
  final bPink = people.where((x)=> x['group']== '블랙핑크').toList();//where()는 조건문이 아닌 애들은 다 지운다. 많이 쓴다!
  print(bPink);
}

//----------------------------------------------------

void main() {//reduce()
  List<int> numbers = [
    1,
    3,
    5,
    7,
    9
  ];
  
  final total = numbers.reduce((prev, next){//return 값이 다음 parameter(prev)에 들어가면서 마지막 요소까지 loop
    print('-----------------');
    print('previous: $prev');
    print('next: $next');
    print('total: ${prev + next}');
    return prev + next;
  });
  
   final total2 = numbers.reduce((prev, next)=> prev + next);//한줄로 줄이면!
    
  
  print(total);
  print(total2);
    
  List<String> words = [
    '안녕하세요',
    '저는',
    '임정훈입니다'
  ];
  final sentence = words.reduce((prev, next)=> prev +' '+ next);
  print(sentence);//반환값의 형이 항상 같아야 한다
}
//---------------------------------------------------------
void main() {//fold<반환할 형>(parameter,(prev, next))
  List<int> numbers = [1, 3, 5, 7, 9];
  
  final sum = numbers.fold<int>(0, (prev, next) => prev + next);//reduce와 다른점 - reduce는 prev부터 시작하지만 fold는 첫번째 파라미터 즉, 0부터 시작한 뒤 reduce와 같이 작동
  print(sum);
  List<String> words = ['안녕', '나는', '임정훈이야'];
  
  final sentence = words.fold<String>(' ', (prev, next)=> prev + ' '+ next);
  print(sentence);
  final sentenceLength = words.fold<int>(0, (prev, next)=> prev.toString().length + next.length);// 잘 못된 것 prev는 첫째 parameter인 0부터 시작하므로 prev에 length를 붙일 필요가 없다 
  final sentenceLength2 = words.fold<int>(0, (prev, next)=> prev + next.length);
  print(sentenceLength);
  print(sentenceLength2);
}
//-------------------------
void main() {//cascading operator

  List<int> even = [
    2, 4, 6, 8
  ];
  
  List<int> odd = [
    1, 3, 5, 7
  ];
  //cascading operator
  
  print([...even , ...odd]); // 두 리스트를 펼쳐서 합치는 것
  
  print(even == [...even]); //, 새로운 List를 만든다 둘이 요소는 같은데도  false
}


